type: edu
custom_name: stage6
files:
- name: src/crawler/ApplicationRunner.java
  visible: true
  text: |
    package crawler;


    public class ApplicationRunner {
        public static void main(String[] args) {
            new WebCrawler();
        }
    }
  learner_created: false
- name: src/crawler/WebCrawler.java
  visible: true
  text: |-
    package crawler;

    import javax.swing.*;

    public class WebCrawler extends JFrame {
        public WebCrawler() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
        }
    }
  learner_created: false
- name: test/CrawlerTest.java
  visible: false
  text: |
    import common.WebCrawlerStage6Test;

    public class CrawlerTest extends WebCrawlerStage6Test {

    }
  learner_created: false
- name: test/common/WebCrawlerCommonTestGenerator.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<WebCrawlerClue>> {
        return listOf(
            createWebCrawlerTest("Window is not visible") { frameGetter().isVisible.toCheckResult() },
            createWebCrawlerTest("Window title is empty") { frameGetter().title.isNotEmpty().toCheckResult() }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
        val name: String,
        val isEnabled: Boolean,
        private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<WebCrawlerClue>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<WebCrawlerClue> {
            return createWebCrawlerTest("No suitable component '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<WebCrawlerClue>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<WebCrawlerClue> {
            return if (requirements.isEnabled) {
                createWebCrawlerTest("'${requirements.name}' should be enabled") {
                    val component = requireNotNull(requirements.suitableComponent) {
                        "Should check for the component existence before"
                    }

                    return@createWebCrawlerTest component.isEnabled.toCheckResult()
                }
            } else {
                createWebCrawlerTest("'${requirements.name}' should be disabled") {
                    val component = requireNotNull(requirements.suitableComponent) {
                        "Should check for the component existence before"
                    }

                    return@createWebCrawlerTest (!component.isEnabled).toCheckResult()
                }
            }
        }

        return components.map(::generateIsEnabledTest)
    }
  learner_created: false
- name: test/common/WebCrawlerLocalhostPages.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.mocks.web.WebPage
    import org.hyperskill.hstest.v6.mocks.web.WebServerMock
    import org.hyperskill.hstest.v6.testcase.TestCase

    fun <AttachType> TestCase<AttachType>.withLocalhostPagesOn(port: Int): TestCase<AttachType> {
        val webServerMock = WebServerMock(port).apply {
            pages.forEach { _, (_, content, relativeUrl) ->
                setPage(relativeUrl,
                        WebPage().setContent(content).setContentType("text/html")) }
        }

        return this.runWith(webServerMock)
    }

    data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set<String>)

    val pages = mapOf(
        localhost(PORT, "/exampleDotCom") to PageProperties(
            "Example Domain",
            """<!doctype html>
    <html>
    <head>
        <title>Example Domain</title>

        <meta charset="utf-8" />
        <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style type="text/css">
        body {
            background-color: #f0f0f2;
            margin: 0;
            padding: 0;
            font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;

        }
        div {
            width: 600px;
            margin: 5em auto;
            padding: 50px;
            background-color: #fff;
            border-radius: 1em;
        }
        a:link, a:visited {
            color: #38488f;
            text-decoration: none;
        }
        @media (max-width: 700px) {
            body {
                background-color: #fff;
            }
            div {
                width: auto;
                margin: 0 auto;
                border-radius: 0;
                padding: 1em;
            }
        }
        </style>
    </head>

    <body>
    <div>
        <h1>Example of Example Domain</h1>
        <p>This domain is established to be used for illustrative examples in documents. You may use this
        domain in examples without prior coordination or asking for permission.</p>
        <p><a href="unavailablePage">More information...</a></p>
    </div>
    </body>
    </html>""",
            "/exampleDotCom",
            setOf(localhost(PORT, "/unavailablePage"))
        ),
        localhost(PORT, "/circular1") to PageProperties(
            "circular1tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular1tiTle</title>
                |</head>
                |<body>
                |<a href="circular2">link1</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular1",
            setOf(localhost(PORT, "/circular2"))
        ),
        localhost(PORT, "/circular2") to PageProperties(
            "circular2tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular2tiTle</title>
                |</head>
                |<body>
                |<a href="circular3">link1</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular2",
            setOf(localhost(PORT, "/circular3"))
        ),
        localhost(PORT, "/circular3") to PageProperties(
            "circular3tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular3tiTle</title>
                |</head>
                |<body>
                |<a href="circular1">link</a>
                |<a href="exampleDotCom">link</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular3",
            setOf(localhost(PORT, "/circular1"), localhost(PORT, "/exampleDotCom"))
        )
    )
  learner_created: false
- name: test/common/WebCrawlerStage6Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    import crawler.WebCrawler
    import org.assertj.swing.fixture.*
    import java.io.File

    abstract class WebCrawlerStage6Test : SwingTest<WebCrawlerClue>(WebCrawler()) {

        override fun generate(): List<TestCase<WebCrawlerClue>> {
            val urlText = ComponentRequirements("UrlTextField", isEnabled = true) { window.textBox(it) }
            val getButton = ComponentRequirements("RunButton", isEnabled = true) { window.toggleButton(it) }
            val saveButton = ComponentRequirements("ExportButton", isEnabled = true) { window.button(it) }
            val pathToFileText = ComponentRequirements("ExportUrlTextField", isEnabled = true) { window.textBox(it) }

            val depthText = ComponentRequirements("DepthTextField", isEnabled = true) { window.textBox(it) }
            val depthCheckBox = ComponentRequirements("DepthCheckBox", isEnabled = true) { window.checkBox(it) }
            val parsedLabel = ComponentRequirements("ParsedLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(urlText, getButton, saveButton, pathToFileText, depthText, depthCheckBox, parsedLabel) +
                    componentsAreEnabledTests(
                        urlText,
                        getButton,
                        saveButton,
                        pathToFileText,
                        depthText,
                        depthCheckBox,
                        parsedLabel
                    ) +
                    stage5TestsWithJToggleButton(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depthTextFieldRequirements = depthText,
                        depthCheckBoxRequirements = depthCheckBox,
                        parsedLabelRequirements = parsedLabel,
                        depth = 1
                    ) +
                    stage5TestsWithJToggleButton(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depthTextFieldRequirements = depthText,
                        depthCheckBoxRequirements = depthCheckBox,
                        parsedLabelRequirements = parsedLabel,
                        depth = 2
                    ) +
                    stage5TestsWithJToggleButton(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depthTextFieldRequirements = depthText,
                        depthCheckBoxRequirements = depthCheckBox,
                        parsedLabelRequirements = parsedLabel,
                        depth = 100500
                    )
        }

        override fun check(reply: String, clue: WebCrawlerClue): CheckResult {
            return checkWebCrawlerTest(reply = reply, clue = clue)
        }
    }

    fun stage5TestsWithJToggleButton(
            saveButtonRequirements: ComponentRequirements<JButtonFixture>,
            getTextButtonRequirements: ComponentRequirements<JToggleButtonFixture>,
            locationTextFieldRequirements: ComponentRequirements<JTextComponentFixture>,
            savePathTextFieldRequirements: ComponentRequirements<JTextComponentFixture>,
            depthTextFieldRequirements: ComponentRequirements<JTextComponentFixture>? = null,
            depthCheckBoxRequirements: ComponentRequirements<JCheckBoxFixture>? = null,
            parsedLabelRequirements: ComponentRequirements<JLabelFixture>? = null,
            depth: Int
    ): List<TestCase<WebCrawlerClue>> {
        return listOf(
                createWebCrawlerTest {
                    val locationTextField = locationTextFieldRequirements.requireExistingComponent()
                    val getTextButton = getTextButtonRequirements.requireExistingComponent()
                    val saveButton = saveButtonRequirements.requireExistingComponent()
                    val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()

                    val depthTextField = depthTextFieldRequirements?.requireExistingComponent()
                    val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()
                    val parsedLabel = parsedLabelRequirements?.requireExistingComponent()

                    for (url in pages.keys) {
                        depthTextField?.setText("$depth")
                        depthCheckBox?.enable()

                        locationTextField.setText(url)

                        getTextButton.click()

                        val fileName = File("").absolutePath + "/temp.log"

                        savePathTextField.setText(fileName)

                        saveButton.click()

                        val file = File(fileName)

                        if (!file.exists()) {
                            return@createWebCrawlerTest fail("Your app doesn't create a file")
                        }

                        val contents = file.readText().lines().chunked(2).filter { it.size == 2 }
                        val deepUrls = url.deepUrls(depth)

                        if (contents.size != deepUrls.size) {
                            return@createWebCrawlerTest fail("File your app saves has a wrong lines number")
                        }

                        if (contents.map { it.first() }.toSet() != deepUrls) {
                            return@createWebCrawlerTest fail("File your app saves has a wrong child url")
                        }

                        val parsedCount = parsedLabel?.text()?.toIntOrNull()

                        if (parsedCount != deepUrls.size) {
                            return@createWebCrawlerTest fail("Parsed pages number your app shows is wrong")
                        }

                        for ((writtenUrl, writtenTitle) in contents) {
                            if (!pages.containsKey(writtenUrl)) {
                                return@createWebCrawlerTest fail("Your file contains a link " +
                                        "to the page that is unavailable. " +
                                        "You shouldn't write unavailable links to the file.")
                            }
                            if (pages.getValue(writtenUrl).title != writtenTitle) {
                                return@createWebCrawlerTest fail("File your app saves has a wrong pair of lines")
                            }
                        }
                    }

                    return@createWebCrawlerTest CheckResult(true)
                }.withLocalhostPagesOn(PORT)
        )
    }
  learner_created: false
- name: test/common/WebCrawlerUtil.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.assertj.swing.fixture.JCheckBoxFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    const val PORT = 25555  // TODO: maybe use another port?

    class WebCrawlerClue(val feedback: String?, val checker: () -> CheckResult)

    fun createWebCrawlerTest(feedback: String? = null, checker: () -> CheckResult): TestCase<WebCrawlerClue> {
        return TestCase<WebCrawlerClue>()
            .setAttach(
                WebCrawlerClue(
                    feedback = feedback,
                    checker = checker
                )
            )
    }

    fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {
        return try {
            val (result, feedback) = clue.checker()

            CheckResult(result, clue.feedback ?: feedback)
        } catch (e: AssertionError) {
            CheckResult(false, clue.feedback)
        }
    }

    private operator fun CheckResult.component1() = isCorrect
    private operator fun CheckResult.component2() = feedback

    fun Boolean.toCheckResult() = CheckResult(this)

    fun fail(message: String) = CheckResult(false, message)

    fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {
        fun String.formatted(): String {
            return this.trim().replace("\r\n", "\n").replace("\r", "\n")
        }

        return source.formatted() == inTextField.formatted()
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>> ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }

    fun localhost(port: Int, url: String) = "http://localhost:$port$url"

    fun String.deepUrls(depth: Int): Set<String> {
        return deepUrlsOld(depth) + setOf(this)
    }

    fun String.deepUrlsOld(depth: Int): Set<String> {
        fun String.childrenOrEmpty(): Set<String> {
            val pageProperties = pages[this]

            if (depth < 0 || pageProperties == null) {
                return emptySet()
            }

            return pageProperties.childUrls.filter { it in pages }.toSet()
        }

        var remainingDepth = depth - 1
        val answer = this.childrenOrEmpty().toMutableSet()
        while (remainingDepth > 0) {
            val next = answer.flatMap { it.childrenOrEmpty() } - answer

            if (next.isEmpty()) {
                break
            }

            answer.addAll(next)

            --remainingDepth
        }

        return answer
    }

    fun JCheckBoxFixture.enable() {
        if (!this.isEnabled) {
            this.click()
        }
    }
  learner_created: false
- name: temp.log
  visible: true
  text: |
    http://localhost:25555/circular1
    circular1tiTle
    http://localhost:25555/exampleDotCom
    Example Domain
    http://localhost:25555/circular3
    circular3tiTle
  learner_created: true
- name: src/crawler/URLTask.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/59/stages/322/implement
status: Failed
feedback:
  message: "\nFAILURE: Build failed with an exception.\n\n* Where:\nSettings file\
    \ &#39;C:\\Projects\\Web_Crawler\\settings.gradle&#39;\n\n* What went wrong:\n\
    Could not compile settings file &#39;C:\\Projects\\Web_Crawler\\settings.gradle&#39;.\n\
    &gt; startup failed:\n  General error during semantic analysis: Unsupported class\
    \ file major version 57\n  \n  java.lang.IllegalArgumentException: Unsupported\
    \ class file major version 57\n  \tat groovyjarjarasm.asm.ClassReader.&lt;init&gt;(ClassReader.java:184)\n\
    \  \tat groovyjarjarasm.asm.ClassReader.&lt;init&gt;(ClassReader.java:166)\n \
    \ \tat groovyjarjarasm.asm.ClassReader.&lt;init&gt;(ClassReader.java:152)\n  \t\
    at groovyjarjarasm.asm.ClassReader.&lt;init&gt;(ClassReader.java:273)\n  \tat\
    \ org.codehaus.groovy.ast.decompiled.AsmDecompiler.parseClass(AsmDecompiler.java:81)\n\
    \  \tat org.codehaus.groovy.control.ClassNodeResolver.findDecompiled(ClassNodeResolver.java:254)\n\
    \  \tat org.codehaus.groovy.control.ClassNodeResolver.tryAsLoaderClassOrScript(ClassNodeResolver.java:192)\n\
    \  \tat org.codehaus.groovy.control.ClassNodeResolver.findClassNode(ClassNodeResolver.java:172)\n\
    \  \tat org.codehaus.groovy.control.ClassNodeResolver.resolveName(ClassNodeResolver.java:128)\n\
    \  \tat org.codehaus.groovy.ast.decompiled.AsmReferenceResolver.resolveClassNullable(AsmReferenceResolver.java:59)\n\
    \  \tat org.codehaus.groovy.ast.decompiled.AsmReferenceResolver.resolveClass(AsmReferenceResolver.java:46)\n\
    \  \tat org.codehaus.groovy.ast.decompiled.AsmReferenceResolver.resolveNonArrayType(AsmReferenceResolver.java:81)\n\
    \  \tat org.codehaus.groovy.ast.decompiled.AsmReferenceResolver.resolveType(AsmReferenceResolver.java:72)\n\
    \  \tat org.codehaus.groovy.ast.decompiled.MemberSignatureParser.createMethodNode(MemberSignatureParser.java:55)\n\
    \  \tat org.codehaus.groovy.ast.decompiled.DecompiledClassNode.lazyInitMembers(DecompiledClassNode.java:195)\n\
    \  \tat org.codehaus.groovy.ast.decompiled.DecompiledClassNode.getDeclaredMethods(DecompiledClassNode.java:121)\n\
    \  \tat org.codehaus.groovy.ast.ClassNode.getMethods(ClassNode.java:912)\n  \t\
    at org.codehaus.groovy.ast.ClassNode.tryFindPossibleMethod(ClassNode.java:1280)\n\
    \  \tat org.codehaus.groovy.control.StaticImportVisitor.transformMethodCallExpression(StaticImportVisitor.java:252)\n\
    \  \tat org.codehaus.groovy.control.StaticImportVisitor.transform(StaticImportVisitor.java:112)\n\
    \  \tat org.codehaus.groovy.ast.ClassCodeExpressionTransformer.visitExpressionStatement(ClassCodeExpressionTransformer.java:144)\n\
    \  \tat org.codehaus.groovy.ast.stmt.ExpressionStatement.visit(ExpressionStatement.java:42)\n\
    \  \tat org.codehaus.groovy.ast.ClassCodeVisitorSupport.visitClassCodeContainer(ClassCodeVisitorSupport.java:110)\n\
    \  \tat org.codehaus.groovy.ast.ClassCodeVisitorSupport.visitConstructorOrMethod(ClassCodeVisitorSupport.java:121)\n\
    \  \tat org.codehaus.groovy.ast.ClassCodeExpressionTransformer.visitConstructorOrMethod(ClassCodeExpressionTransformer.java:55)\n\
    \  \tat org.codehaus.groovy.control.StaticImportVisitor.visitConstructorOrMethod(StaticImportVisitor.java:88)\n\
    \  \tat org.codehaus.groovy.ast.ClassCodeVisitorSupport.visitConstructor(ClassCodeVisitorSupport.java:128)\n\
    \  \tat org.codehaus.groovy.ast.ClassNode.visitContents(ClassNode.java:1099)\n\
    \  \tat org.codehaus.groovy.ast.ClassCodeVisitorSupport.visitClass(ClassCodeVisitorSupport.java:54)\n\
    \  \tat org.codehaus.groovy.control.StaticImportVisitor.visitClass(StaticImportVisitor.java:82)\n\
    \  \tat org.codehaus.groovy.control.CompilationUnit$14.call(CompilationUnit.java:717)\n\
    \  \tat org.codehaus.groovy.control.CompilationUnit.applyToPrimaryClassNodes(CompilationUnit.java:1095)\n\
    \  \tat org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:649)\n\
    \  \tat org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:627)\n\
    \  \tat org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:604)\n\
    \  \tat groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390)\n\
    \  \tat groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89)\n\
    \  \tat groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330)\n\
    \  \tat groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327)\n\
    \  \tat org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147)\n\
    \  \tat groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325)\n\
    \  \tat org.gradle.groovy.scripts.internal.DefaultScriptCompilationHandler.compileScript(DefaultScriptCompilationHandler.java:133)\n\
    \  \tat org.gradle.groovy.scripts.internal.DefaultScriptCompilationHandler.compileToDir(DefaultScriptCompilationHandler.java:93)\n\
    \  \tat org.gradle.groovy.scripts.internal.BuildOperationBackedScriptCompilationHandler$2.run(BuildOperationBackedScriptCompilationHandler.java:54)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:402)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:394)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:92)\n\
    \  \tat org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)\n\
    \  \tat org.gradle.groovy.scripts.internal.BuildOperationBackedScriptCompilationHandler.compileToDir(BuildOperationBackedScriptCompilationHandler.java:51)\n\
    \  \tat org.gradle.groovy.scripts.internal.FileCacheBackedScriptClassCompiler$CompileToCrossBuildCacheAction.execute(FileCacheBackedScriptClassCompiler.java:151)\n\
    \  \tat org.gradle.groovy.scripts.internal.FileCacheBackedScriptClassCompiler$CompileToCrossBuildCacheAction.execute(FileCacheBackedScriptClassCompiler.java:132)\n\
    \  \tat org.gradle.groovy.scripts.internal.FileCacheBackedScriptClassCompiler$ProgressReportingInitializer.execute(FileCacheBackedScriptClassCompiler.java:175)\n\
    \  \tat org.gradle.groovy.scripts.internal.FileCacheBackedScriptClassCompiler$ProgressReportingInitializer.execute(FileCacheBackedScriptClassCompiler.java:155)\n\
    \  \tat org.gradle.cache.internal.DefaultPersistentDirectoryCache$Initializer.initialize(DefaultPersistentDirectoryCache.java:98)\n\
    \  \tat org.gradle.cache.internal.FixedSharedModeCrossProcessCacheAccess$1.run(FixedSharedModeCrossProcessCacheAccess.java:85)\n\
    \  \tat org.gradle.cache.internal.DefaultFileLockManager$DefaultFileLock.doWriteAction(DefaultFileLockManager.java:207)\n\
    \  \tat org.gradle.cache.internal.DefaultFileLockManager$DefaultFileLock.writeFile(DefaultFileLockManager.java:197)\n\
    \  \tat org.gradle.cache.internal.FixedSharedModeCrossProcessCacheAccess.open(FixedSharedModeCrossProcessCacheAccess.java:83)\n\
    \  \tat org.gradle.cache.internal.DefaultCacheAccess.open(DefaultCacheAccess.java:142)\n\
    \  \tat org.gradle.cache.internal.DefaultPersistentDirectoryStore.open(DefaultPersistentDirectoryStore.java:78)\n\
    \  \tat org.gradle.cache.internal.DefaultPersistentDirectoryStore.open(DefaultPersistentDirectoryStore.java:42)\n\
    \  \tat org.gradle.cache.internal.DefaultCacheFactory.doOpen(DefaultCacheFactory.java:94)\n\
    \  \tat org.gradle.cache.internal.DefaultCacheFactory.open(DefaultCacheFactory.java:68)\n\
    \  \tat org.gradle.cache.internal.DefaultCacheRepository$PersistentCacheBuilder.open(DefaultCacheRepository.java:118)\n\
    \  \tat org.gradle.groovy.scripts.internal.FileCacheBackedScriptClassCompiler$RemapBuildScriptsAction.execute(FileCacheBackedScriptClassCompiler.java:421)\n\
    \  \tat org.gradle.groovy.scripts.internal.FileCacheBackedScriptClassCompiler$RemapBuildScriptsAction.execute(FileCacheBackedScriptClassCompiler.java:390)\n\
    \  \tat org.gradle.groovy.scripts.internal.FileCacheBackedScriptClassCompiler$ProgressReportingInitializer.execute(FileCacheBackedScriptClassCompiler.java:175)\n\
    \  \tat org.gradle.groovy.scripts.internal.FileCacheBackedScriptClassCompiler$ProgressReportingInitializer.execute(FileCacheBackedScriptClassCompiler.java:155)\n\
    \  \tat org.gradle.cache.internal.DefaultPersistentDirectoryCache$Initializer.initialize(DefaultPersistentDirectoryCache.java:98)\n\
    \  \tat org.gradle.cache.internal.FixedSharedModeCrossProcessCacheAccess$1.run(FixedSharedModeCrossProcessCacheAccess.java:85)\n\
    \  \tat org.gradle.cache.internal.DefaultFileLockManager$DefaultFileLock.doWriteAction(DefaultFileLockManager.java:207)\n\
    \  \tat org.gradle.cache.internal.DefaultFileLockManager$DefaultFileLock.writeFile(DefaultFileLockManager.java:197)\n\
    \  \tat org.gradle.cache.internal.FixedSharedModeCrossProcessCacheAccess.open(FixedSharedModeCrossProcessCacheAccess.java:83)\n\
    \  \tat org.gradle.cache.internal.DefaultCacheAccess.open(DefaultCacheAccess.java:142)\n\
    \  \tat org.gradle.cache.internal.DefaultPersistentDirectoryStore.open(DefaultPersistentDirectoryStore.java:78)\n\
    \  \tat org.gradle.cache.internal.DefaultPersistentDirectoryStore.open(DefaultPersistentDirectoryStore.java:42)\n\
    \  \tat org.gradle.cache.internal.DefaultCacheFactory.doOpen(DefaultCacheFactory.java:94)\n\
    \  \tat org.gradle.cache.internal.DefaultCacheFactory.open(DefaultCacheFactory.java:68)\n\
    \  \tat org.gradle.cache.internal.DefaultCacheRepository$PersistentCacheBuilder.open(DefaultCacheRepository.java:118)\n\
    \  \tat org.gradle.groovy.scripts.internal.FileCacheBackedScriptClassCompiler.compile(FileCacheBackedScriptClassCompiler.java:105)\n\
    \  \tat org.gradle.groovy.scripts.internal.CrossBuildInMemoryCachingScriptClassCache.getOrCompile(CrossBuildInMemoryCachingScriptClassCache.java:49)\n\
    \  \tat org.gradle.groovy.scripts.internal.BuildScopeInMemoryCachingScriptClassCompiler.compile(BuildScopeInMemoryCachingScriptClassCompiler.java:50)\n\
    \  \tat org.gradle.groovy.scripts.DefaultScriptCompilerFactory$ScriptCompilerImpl.compile(DefaultScriptCompilerFactory.java:50)\n\
    \  \tat org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.apply(DefaultScriptPluginFactory.java:194)\n\
    \  \tat org.gradle.configuration.BuildOperationScriptPlugin$1$1.run(BuildOperationScriptPlugin.java:69)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:402)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:394)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:92)\n\
    \  \tat org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)\n\
    \  \tat org.gradle.configuration.BuildOperationScriptPlugin$1.execute(BuildOperationScriptPlugin.java:66)\n\
    \  \tat org.gradle.configuration.BuildOperationScriptPlugin$1.execute(BuildOperationScriptPlugin.java:63)\n\
    \  \tat org.gradle.configuration.internal.DefaultUserCodeApplicationContext.apply(DefaultUserCodeApplicationContext.java:48)\n\
    \  \tat org.gradle.configuration.BuildOperationScriptPlugin.apply(BuildOperationScriptPlugin.java:63)\n\
    \  \tat org.gradle.initialization.ScriptEvaluatingSettingsProcessor.applySettingsScript(ScriptEvaluatingSettingsProcessor.java:69)\n\
    \  \tat org.gradle.initialization.ScriptEvaluatingSettingsProcessor.process(ScriptEvaluatingSettingsProcessor.java:61)\n\
    \  \tat org.gradle.initialization.PropertiesLoadingSettingsProcessor.process(PropertiesLoadingSettingsProcessor.java:37)\n\
    \  \tat org.gradle.initialization.SettingsEvaluatedCallbackFiringSettingsProcessor.process(SettingsEvaluatedCallbackFiringSettingsProcessor.java:34)\n\
    \  \tat org.gradle.initialization.RootBuildCacheControllerSettingsProcessor.process(RootBuildCacheControllerSettingsProcessor.java:36)\n\
    \  \tat org.gradle.initialization.BuildOperationSettingsProcessor$2.call(BuildOperationSettingsProcessor.java:50)\n\
    \  \tat org.gradle.initialization.BuildOperationSettingsProcessor$2.call(BuildOperationSettingsProcessor.java:47)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:416)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:406)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:102)\n\
    \  \tat org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)\n\
    \  \tat org.gradle.initialization.BuildOperationSettingsProcessor.process(BuildOperationSettingsProcessor.java:47)\n\
    \  \tat org.gradle.initialization.DefaultSettingsLoader.findSettingsAndLoadIfAppropriate(DefaultSettingsLoader.java:104)\n\
    \  \tat org.gradle.initialization.DefaultSettingsLoader.findAndLoadSettings(DefaultSettingsLoader.java:45)\n\
    \  \tat org.gradle.initialization.SettingsAttachingSettingsLoader.findAndLoadSettings(SettingsAttachingSettingsLoader.java:35)\n\
    \  \tat org.gradle.internal.composite.CommandLineIncludedBuildSettingsLoader.findAndLoadSettings(CommandLineIncludedBuildSettingsLoader.java:34)\n\
    \  \tat org.gradle.internal.composite.ChildBuildRegisteringSettingsLoader.findAndLoadSettings(ChildBuildRegisteringSettingsLoader.java:47)\n\
    \  \tat org.gradle.internal.composite.CompositeBuildSettingsLoader.findAndLoadSettings(CompositeBuildSettingsLoader.java:35)\n\
    \  \tat org.gradle.initialization.DefaultGradleLauncher$LoadBuild.run(DefaultGradleLauncher.java:277)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:402)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:394)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:92)\n\
    \  \tat org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)\n\
    \  \tat org.gradle.initialization.DefaultGradleLauncher.loadSettings(DefaultGradleLauncher.java:202)\n\
    \  \tat org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:147)\n\
    \  \tat org.gradle.initialization.DefaultGradleLauncher.executeTasks(DefaultGradleLauncher.java:134)\n\
    \  \tat org.gradle.internal.invocation.GradleBuildController$1.execute(GradleBuildController.java:58)\n\
    \  \tat org.gradle.internal.invocation.GradleBuildController$1.execute(GradleBuildController.java:55)\n\
    \  \tat org.gradle.internal.invocation.GradleBuildController$3.create(GradleBuildController.java:82)\n\
    \  \tat org.gradle.internal.invocation.GradleBuildController$3.create(GradleBuildController.java:75)\n\
    \  \tat org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:183)\n\
    \  \tat org.gradle.internal.work.StopShieldingWorkerLeaseService.withLocks(StopShieldingWorkerLeaseService.java:40)\n\
    \  \tat org.gradle.internal.invocation.GradleBuildController.doBuild(GradleBuildController.java:75)\n\
    \  \tat org.gradle.internal.invocation.GradleBuildController.run(GradleBuildController.java:55)\n\
    \  \tat org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:31)\n\
    \  \tat org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\n\
    \  \tat org.gradle.launcher.exec.BuildOutcomeReportingBuildActionRunner.run(BuildOutcomeReportingBuildActionRunner.java:58)\n\
    \  \tat org.gradle.tooling.internal.provider.ValidatingBuildActionRunner.run(ValidatingBuildActionRunner.java:32)\n\
    \  \tat org.gradle.launcher.exec.BuildCompletionNotifyingBuildActionRunner.run(BuildCompletionNotifyingBuildActionRunner.java:39)\n\
    \  \tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner$3.call(RunAsBuildOperationBuildActionRunner.java:51)\n\
    \  \tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner$3.call(RunAsBuildOperationBuildActionRunner.java:45)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:416)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:406)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)\n\
    \  \tat org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:102)\n\
    \  \tat org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)\n\
    \  \tat org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner.run(RunAsBuildOperationBuildActionRunner.java:45)\n\
    \  \tat org.gradle.launcher.exec.InProcessBuildActionExecuter$1.transform(InProcessBuildActionExecuter.java:49)\n\
    \  \tat org.gradle.launcher.exec.InProcessBuildActionExecuter$1.transform(InProcessBuildActionExecuter.java:46)\n\
    \  \tat org.gradle.composite.internal.DefaultRootBuildState.run(DefaultRootBuildState.java:78)\n\
    \  \tat org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:46)\n\
    \  \tat org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:31)\n\
    \  \tat org.gradle.launcher.exec.BuildTreeScopeBuildActionExecuter.execute(BuildTreeScopeBuildActionExecuter.java:42)\n\
    \  \tat org.gradle.launcher.exec.BuildTreeScopeBuildActionExecuter.execute(BuildTreeScopeBuildActionExecuter.java:28)\n\
    \  \tat org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:78)\n\
    \  \tat org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:52)\n\
    \  \tat org.gradle.tooling.internal.provider.SubscribableBuildActionExecuter.execute(SubscribableBuildActionExecuter.java:59)\n\
    \  \tat org.gradle.tooling.internal.provider.SubscribableBuildActionExecuter.execute(SubscribableBuildActionExecuter.java:36)\n\
    \  \tat org.gradle.tooling.internal.provider.SessionScopeBuildActionExecuter.execute(SessionScopeBuildActionExecuter.java:68)\n\
    \  \tat org.gradle.tooling.internal.provider.SessionScopeBuildActionExecuter.execute(SessionScopeBuildActionExecuter.java:38)\n\
    \  \tat org.gradle.tooling.internal.provider.GradleThreadBuildActionExecuter.execute(GradleThreadBuildActionExecuter.java:37)\n\
    \  \tat org.gradle.tooling.internal.provider.GradleThreadBuildActionExecuter.execute(GradleThreadBuildActionExecuter.java:26)\n\
    \  \tat org.gradle.tooling.internal.provider.ParallelismConfigurationBuildActionExecuter.execute(ParallelismConfigurationBuildActionExecuter.java:43)\n\
    \  \tat org.gradle.tooling.internal.provider.ParallelismConfigurationBuildActionExecuter.execute(ParallelismConfigurationBuildActionExecuter.java:29)\n\
    \  \tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:60)\n\
    \  \tat org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:32)\n\
    \  \tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:55)\n\
    \  \tat org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:41)\n\
    \  \tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:48)\n\
    \  \tat org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:32)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:67)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n\
    \  \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37)\n\
    \  \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)\n\
    \  \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)\n\
    \  \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)\n\
    \  \tat org.gradle.util.Swapper.swap(Swapper.java:38)\n  \tat org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)\n\
    \  \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55)\n\
    \  \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:62)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n\
    \  \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:81)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n\
    \  \tat org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)\n\
    \  \tat org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)\n\
    \  \tat org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:295)\n\
    \  \tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)\n\
    \  \tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)\n\
    \  \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\
    \  \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\
    \  \tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)\n\
    \  \tat java.base/java.lang.Thread.run(Thread.java:830)\n  \n  1 error\n\n\n*\
    \ Try:\nRun with --stacktrace option to get the stack trace. Run with --info or\
    \ --debug option to get more log output. Run with --scan to get full insights.\n\
    \n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 1s\n"
  time: Sun, 18 Oct 2020 09:12:55 UTC
record: -1
